@model List<GradeBook.Models.Student>
@using GradeBook.Models
@using GradeBook.Services
@{
    var role = Context.Session.GetString("Role");
    var userEmail = Context.Session.GetString("Email");
    
    List<User> users = null;
    User currentUser = null;
    int? studentIdForCurrentUser = null;
    
    if (role == "Manager")
    {
        users = UserJsonService.LoadUsers();
    }
    
    if (role == "Student" && !string.IsNullOrEmpty(userEmail))
    {
        var allUsers = UserJsonService.LoadUsers();
        currentUser = allUsers.FirstOrDefault(u => u.Email == userEmail);
        studentIdForCurrentUser = currentUser?.StudentId;
    }
}
<head>
    <meta charset="utf-8" />
    <title>GradeBook</title>
    <link rel="stylesheet" href="@Url.Content("~/css/style.css")" />
    <link rel="stylesheet" href="@Url.Content("~/css/jumper.css")" />
</head>
<body>
    <div id="jumper">ඞ</div>
    <main>
        <h2>Students List</h2>
        <ul>
            @foreach (var student in Model)
            {
                if (role == "Student" && studentIdForCurrentUser != student.Id)
                {
                    continue;
                }
                
                var grades = student.Grades ?? new List<GradeBook.Models.Grade>();
                var hasGrades = grades.Any();
                var avg = hasGrades ? grades.Average(g => g.GradeValue) : 0;
                var min = hasGrades ? grades.Min(g => g.GradeValue) : 0;
                var max = hasGrades ? grades.Max(g => g.GradeValue) : 0;
                var minComments = hasGrades ? string.Join(", ", grades.Where(g => g.GradeValue == min).Select(g => g.Description)) : "-";
                var maxComments = hasGrades ? string.Join(", ", grades.Where(g => g.GradeValue == max).Select(g => g.Description)) : "-";
                <li>
                    <a href="@Url.Action("DisplayGrades", "Grades", new { studentId = student.Id })">
                        @student.FirstName @student.LastName (@student.Class)
                    </a>
                    <br />
                    Grade average: @(hasGrades? avg.ToString("0.00") : "-")
                    <br />
                    Lowest grade: <span class="grade">@(hasGrades ? min.ToString() : "-")</span> (Comment: @minComments)
                    <br />
                    Highest grade: <span class="grade">@(hasGrades ? max.ToString() : "-")</span> (Comment: @maxComments)
                    <br />
                </li>
            }
        </ul>
        @if (role == "Teacher")
        {
            <a href="@Url.Action("AddStudent", "Students")">Add New Student</a>
        }
        @if (role == "Manager")
        {
            <a href="@Url.Action("ManageAccounts", "Managers")">Manage Accounts</a>
        }
    </main>
</body>
<script src="@Url.Content("~/js/jumper.js")"></script>
<script src="@Url.Content("~/js/gradeColor.js")"></script>
